컴네 11주차
application layer

비실시간성 application protocol
- http : web
- FTP : 파일 전송
- smtp : 메일 전송

application 은 socket을 통해 tran. layer와 소통
socket의 건너편은 상대방 end system socket

app 구조
1. 한쪽 서비스 / 한쪽 요청(client-server)  , asysmetric
2. 둘다 댐 (P2P), sysmetric
그림의 왼쪽이 1, 오른쪽이 2

socket : 프로세스 와 network 사이 interface (접점)

app의 process와 하위 레이이ㅓ의 network 의 인터페이스

6page 그림
L4 이하(전송, transport) 관점에서의 요구사항
- file transtfer/download : 파일 전송, 다운로드 / data loss 없어야 함, throughpt은 elastic(영향을받지않음), time sensitive (시간 민감도 ? 정도~ latency) 하지말아야 한다.
- e-mail : data loss 없, throughput elastic, no time sensitive
- web document : html 문서
- 화상 전화/ 음성 전화 : time sensitive (100 mili second까지의 delay만 허용),loss-tolerant(끊김을 견딜 수 있는), throughpt(음성의 경우 1Mbps이하면 허용, video는 5Mbps이하면 허용)
- 스트리밍 : time sensitive 하다. loss-tolerant
- game
- instant messaging : kakaotalk, (mail,web)보다는 time sensitive 하다.

> app에 따라서 하위 layer(network) 의 동작이 달라짐
- ex) 실시간 성을 가진 data부터 처리하고, 다음 단계를 처리

HTTP : on-demand 기반 동작(요청이 있을때만 동작)
spac이 RFC195,2616에 적혀있다잉

app layer 의 pdu = message

URL : hostname+ resource 관련 경로
그림에서 빨간 부분이 hostname(webserver 이름)

http : 
TCP 연결 기반
prot 번호 default면 80번 
state가 없이 요청-> 응답 . 단순 응답임

browser끼리의 차이  : 어떻게 보여줄 것인가

http 안의 object마다 http request/ response 하는 것임

non-persistent의 순서(비연속적): object별로 tcp con. 새로 생성
 1. tcp conne. 2. HTTP req 3.HTTP res 4.TCP release
그림에서 빨간 부분
complement를 보내면서 http req도 같이 보냄
다보내고 해제할때는 http res를 보내면서 TCP release를 같이 보냄

object마다 2RTT(round trip time) 시간 소요
-> server에서 tcp 연결 관리에 대한 부담이 큼 -> 비효율적

Persistent con.
한번 TCP con을 맺고 모든 onject를 전송

pipelining : 병렬적 처리

HTTP message format
헤더 정보 (control 정보) : bit 형태보다는 text 형태의 message
- l3,l4는 bit 형태의 header를 가짐
HTTP Request : 요청을 하고자 하는 resource의 llink가 들어있다
HTTP reponese: 버전, status code(http protocol 안의 status code), entity body(hypertext의 내용, 실제 문서(코드))

HTML5 :

cookies : web server(백엔드)에서 사용자 상태 저장을 위한 data
요새는 user identification(유저 구분)을 위해서 state 기반의 동작 필요-> 쿠키 사용

MVC (model view control) : 백엔드에서 사용

web caching : server에 있는 data를 미리 local로 땡겨옴. 그걸 뭐 또 다른 server에 넣어둔다거나 한다잉. 분산시켜서 . 그런 서버의 형태를 proxy server 

web browser( ex 뭐 구글 서버)에서 proxy 를 설정하면 web cache에 접속. 복제본 있으면 받고, 없으면 origin server에서 받아옴
보통 isp에서 설치
서버의 부담이 너무 커지므로 (bottelneck 문제가 생길 수 있다) 그래서 seb caching을 사용하는 것임. 

FTP : 요즘엔 잘 사용하지 않음. 보안상의 문제.

mail : 거의 완성형 프로토콜 (smtp) 사용. 고전적이면서 여전히 많이사용 . asynchrnius com. medium 
천천히 가도됨. 
전송은 smtp를 통해 mail server에서만 이뤄지고 hw(agent)끼리 뭐가 이뤄지지는 않음.

email 형태 중 가장 많이사용하는 형태 web-based email

pop3, IMap(message access protocols)
pop3 : mail을 가져오면 server에서 pop( 없애버림)
IMAP : mail을 가져오면 server에 남겨둠 . 이게 더 많이 사용

pop3 : 메세지 수신 시 server에서 delete. (안할수도 있긴 함, keep)
-> 왜지우냐 ? overhead, 저장공간 문제 때문에

IMAP : 하나인 것 처럼 동작 . 동기화

HTTP vs SMTP :
http : pull protocol : data를 땡겨오는 방식
smtp : push protocol : data를 밀어넣는 방식

DNS : ip를 hast name과 mapping 
ip는 사람에게 친숙하지 않으니까 host name을 mapping 해줌으로서 국가와 기관의 성격 유추가능

socket programming : 


