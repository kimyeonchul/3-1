생명주기(life cycle)

activity 생명 주기 : 생명주기에 포함된 함수들을 총칭

생명주기를 왜 사용할까 ? :
ex) 게임하다가 전화가 온다면 ? -> 전화가 오고 전화가 끝나면 다시 게임 화면으로 돌아간다. 

생명주기 패러다임
액티비티가 생성되고 소멸되기까지 여러 함수들로 구성

onCreate() : 엑티비티가 생성되고 가장 먼저 실행되어야 하는 작업들이 들어감 ex) data binding, View 생성, setContentView와 같은 layout 정의

onStart() : 화면에 진입할 때 마다 실행되어야 하는 작업들, 사용자와 상호작용할 준비, ui를 관리하는 코드를 초기화, onStop()에서 해제된 리소스 초기화

onResume() : 사용자에ㅔㄱ 보여지고 나서 실행 사용자에게 보이는 동안 실행해야 하는 기능, 사용자와 상호작용하기 전에 실행되어야 하고, 호출되고 나면 액티비티가 사용자와 상호작용, 카메라 미리보기(카메라 켜기), onPause()에 해제된 리소스 초기화, 화면이 재개된 상태로 전환될 때마다 필요한 다른 초기화 작업.
전화가 온다던지, 홈버튼을 눌러서 화면이 꺼진다던지. 

onPause() : 액티비티가 정상적으로 실행되다가 어떤 event가 발생해서 사용자가 activity에서 떠나게 되면 첫번째 신호로 호출되는 함수. 액티비티가 최상단에 있지 않고(포커스를 잃은) 상태. 잠시 후 다시 시작할 작업을 일시중지 or 조정. 배터리 수명에 영향을 미칠 수 있는 리소스(Gps ,thread, 카메라 )를 해제
여기서 다시 액티ㅂㅌ가  최상단으로 초기화되면 onResume()으로 감. 그러면 onPause()에서 해제된 리소스를 초기화

onStop(): 액티비티가 완전히 가려져서 사용자에게 아예 보여지지 않을 때. onPause와의 차이 : 온포스는 포커스를 잃었을 때 호출, onstop은 화면이 완전히 가려졌을 때 호출 예시는 완전히 가려지지 않았기 떄문에 onPause임
새로운 activty가 기존의 activity를 완전히 가렸으 때 onStop() 호출
사용자에게 보이지 않는 동안 필요하지 않은 리소스를 해제 or 조정
비ㅛㄱ적 부하가 큰 저장 작업
정보를 데이터베이스의 저장
onPause()는 아주 잠깐 실행되기 떄문에 부하가 큰 저장작업은 불가능하고 아주 작은 저장작업이 가능하긴 함
액티비티가 가려졌다가 다시 보여졌을 때 onRestart() 함수 호출

onDestroy() : 액티비티가 소멸되기 전에 정리하는 작업
해제되지 않은 모든 리소스 해제

다른 애플리케이션에서 메모리가 필요하면 안 쓰이는 (백그라운드)에 있는 프로세스가 종료되는데 따라서 onCrate()-onResume()의 함수상태의 프로세스는 강제 종료될 가능성이 매우적고 onPause()
상태는 가능성 높고 onStop과 onDestroy이 가능성이 높다
아무리 높아도 종료될 가능성이 그냥 현저히 적다.